{# body_component.j2

WISHBONE (Registered) Component Body

Expects:
    node (Node): The component being generated
    changes (list): List of 3-element change tuples
    time (datetime): The time of file generation.
#}
------------------------------------------------------------------------------
{% filter reflow(width = 76, indent = '--  ') %}
{{ node.name }} WISHBONE Component

Implements the {{ node.name }} component on a WISHBONE B4 bus using
a registerd feedback cycle (not WISHBONE B3 compatible).


{% for d in node.description %}
{{ d }}

{% endfor %}

==================  ================================================

                    WISHBONE Datasheet
                              
--------------------------------------------------------------------

WB Revision         B4

Interface           SLAVE

ERR_O               Asserted for operations on missing registers, or

                    reads/writes on write-only/read-only registers.
                    
Port size           {{ node.width }}-bit

Granularit :        8-bit

Maximum Operand     {{ node.width }}-bit

Transfer Order      BIG ENDIAN

Transfer Sequence   ASCENDING

==================  ================================================


{% if changes %}
Changes from XML:
{% for c in changes %}
    {{ c[0] }}: {{ c[1] }} -> {{ c[2] }}
    
{% endfor %}

{% endif %}

Template generated automatically on {{ time.strftime("%d %b %Y %H:%M") }} from 
{{ node.sourcefile }}.  Subject to modification.  See README.rst for details.
{% endfilter %}

------------------------------------------------------------------------------

{% set addrlsbs = ((node.width // 8)-1).bit_length() %}
{% set addrhigh = (node.size - 1).bit_length() - 1 + addrlsbs %}
{% set datahigh = node.width - 1 %}
{% set behigh = (node.width // 8) - 1 %}
        
library ieee;
use ieee.std_logic_1164.all;

entity {{ node.name }} is
    port (
        -- START: User ports
        -- END: User ports
        
        -- WISHBONE interface
        ADR_I   : in  std_logic_vector({{ addrhigh }} downto {{ addrlsbs }});
        CYC_I   : in  std_logic;
        DAT_I   : in  std_logic_vector({{ datahigh }} downto 0);
        SEL_I   : in  std_logic_vector({{ behigh }} downto 0);
        STB_I   : in  std_logic;
        WE_I    : in  std_logic;
        
        ACK_O   : out std_logic;
        DAT_O   : out std_logic_vector({{ datahigh }} downto 0);
        ERR_O   : out std_logic;
        STALL_O : out std_logic;
        
        CLK_I   : in  std_logic;
        RST_I   : in  std_logic
    );
end entity {{ node.name }};

use work.pkg_{{ node.name }}.all;

architecture Behavioral of {{ node.name }} is
    
    -- START: Add any local signals here.
    -- END: Add any local signals here.
    
begin
    
    STALL_O <= '0';
    
    -- Synchronous bus read/write.
    
    WISHBONE: process(CLK_I)
        variable reg : t_{{ node.name }}_regfile := RESET_t_{{ node.name }}_REGFILE;
        variable addr : t_addr;
        variable success : boolean;
        variable rdat : t_busdata;
    begin
        if rising_edge(CLK_I) then
            -- START: Update all read-only values in reg here.
            -- END: Update all read-only values in reg here.
            
            DAT_O <= (others => 'X');
            ACK_O <= '0';
            ERR_O <= '0';
            
            if (RST_I = '1') then
                reg := RESET_t_{{ node.name }}_REGFILE;
                
            elsif (STB_I = '1') and (CYC_I = '1') then
                addr := GET_ADDR(ADR_I);
                if WE_I = '1' then
                    UPDATE_REGFILE(DAT_I, SEL_I, addr, reg, success);
                else
                    READ_REGFILE(addr, reg, rdat, success);
                    DAT_O <= rdat;
                end if;
                    
                if success then
                    ACK_O <= '1';
                    ERR_O <= '0';
                else
                    ACK_O <= '0';
                    ERR_O <= '1';
                end if;
            
            end if;
                
            -- START: Process any updated values here.
            -- END: Process any updated values here.
        end if;
    end process WISHBONE;

end architecture Behavioral;
