{# body_component.j2

WISHBONE (Async) Component Body

Expects:
	node (Node): The component being generated
	header (str): Fully formatted header block
#}
------------------------------------------------------------------------------
{{ header }} 
------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;

entity {{ node.name }} is
	port (
		-- TODO: User ports
		
		-- WISHBONE interface
		{% set addrhigh = (node.size - 1).bit_length() - 1 %}
		{% set datahigh = node.width - 1 %}
        {% set behigh = (node.width // 8) - 1 %}
		ADR_I : in  std_logic_vector({{ addrhigh }} downto 0);
		CYC_I : in  std_logic;
		DAT_I : in  std_logic_vector({{ datahigh }} downto 0);
		SEL_I : in  std_logic_vector({{ behigh }} downto 0);
		STB_I : in  std_logic;
		WE_I  : in  std_logic;
		
		ACK_O : out std_logic;
		DAT_O : out std_logic_vector({{ datahigh }} downto 0);
		ERR_O : out std_logic;
		RTY_O : out std_logic;
		
		CLK_I : in  std_logic;
		RST_I : in  std_logic
	);
end entity {{ node.name }};

use work.pkg_{{ node.name }}.all;

architecture Behavioral of {{ node.name }} is
	
	function SL(x : boolean) return std_logic is
	begin
		if x then return '1';
		else return '0';
		end if;
	end function SL;
	
begin
	
	-- Main bus interface.
	WISHBONE: process(CLK_I)
		variable addr : t_addr;
		variable reg : t_{{ node.name }}_regfile := RESET_t_{name}_REGFILE;
		variable success : boolean;
		variable rdat : t_busdata;
	begin
		wait until rising_edge(CLK_I);
		ACK_O <= '0';
		ERR_O <= '0';
		RTY_O <= '0';
		DAT_O <= (others => 'X');
		if (CYC_I = '1' and STB_I = '1') then
			-- TODO: Update all read-only values in reg here.
			
			addr := GET_ADDR(ADR_I);
			
			if WE_I = '0' then
				-- Read processing
				READ_REGFILE(addr, reg, rdat, success);
				DAT_O <= rdat;
			else
				-- Write processing
				UPDATE_REGFILE(DAT_I, SEL_I, addr, reg, success);
			end if;
			
			if success then
				ACK_O <= '1';
			else
				ERR_O <= '1';
			end if;
		end if;
		
		if RST_I = '1' then
			ACK_O <= '0';
			ERR_O <= '0';
			reg := RESET_t_{name}_REGFILE;
		end if;
		
		-- TODO: Process any updated values here.
	end process WISHBONE;

end architecture Behavioral;
