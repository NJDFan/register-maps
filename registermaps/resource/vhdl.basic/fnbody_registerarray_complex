procedure UPDATE_{name}(
	dat: in t_busdata; byteen : in std_logic_vector;
	offset: in t_addr;
	variable ra: inout ta_{name};
	success: out boolean
) is
	variable idx: integer range 0 to {name}_FRAMECOUNT-1;
	variable offs: integer range 0 to {name}_FRAMESIZE-1;
begin
	idx := offset / {name}_FRAMESIZE;
	offs := offset mod {name}_FRAMESIZE;
	success := true;
	case offs is
{updatelines}
	end case;
end procedure UPDATE_{name};

procedure UPDATESIG_{name}(
	dat: in t_busdata; byteen : in std_logic_vector;
	offset: in t_addr;
	signal ra: inout ta_{name};
	success: out boolean
) is
	variable idx: integer range 0 to {name}_FRAMECOUNT-1;
	variable offs: integer range 0 to {name}_FRAMESIZE-1;
	variable temp: tb_{name};
begin
	idx := offset / {name}_FRAMESIZE;
	temp := ra(idx);
	offs := offset mod {name}_FRAMESIZE;
	success := true;
	case offs is
{updatesiglines}
	end case;
end procedure UPDATESIG_{name};

procedure READ_{name}(
	offset: in t_addr;
	ra: in ta_{name};
	dat: out t_busdata;
	success: out boolean
) is
	variable idx: integer range 0 to {name}_FRAMECOUNT-1;
	variable offs: integer range 0 to {name}_FRAMESIZE-1;
begin
	idx := offset / {name}_FRAMESIZE;
	offs := offset mod {name}_FRAMESIZE;
	success := true;
	dat := (others => 'X');
	case offs is
{readlines}
	end case;
end procedure READ_{name};
