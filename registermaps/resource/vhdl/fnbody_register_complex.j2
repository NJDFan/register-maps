{#  fnbody_register_complex.j2

Function bodies for complex registers.

Expects:
    name (str): Name of the register.
    fields (list of dict): All fields in the register.
        Each element has fields:
        - ident (str): Identifier of the register
          (no VHDL reserved word conflicts allowed)
        - srcrange (str): Bit range in the source word, i.e. '23 downto 0'
        - subtype (str): Base subtype (no indices) of the register.
    
    byte (list of dict): Dicts for each byte of the source word that
        has any field bits in it, starting with the LSB.  Has fields:
        - index (int): The byte index: 0 means bits 7 downto 0.
        - fields (list of dict): Fields present in this byte.
            - ident (str): as above
            - srcrange (str): as above
            - subtype (str): as above
            - range (str): Bit range in the destination field.
#}
---- {{name}} ----
function DAT_TO_{{name}}(dat: t_busdata) return t_{{name}} is
    variable ret : t_{{name}};
begin
    return (
     {% for f in fields %}
      {% if f.subtype.upper().startswith("STD_LOGIC") %}
        {{f.ident}} => dat({{f.srcrange}}){{ "," if not loop.last }}
      {% else %}
        {{f.ident}} => {{f.subtype|upper}}( dat({{f.srcrange}}) ){{ "," if not loop.last }}
      {% endif %}
     {% endfor %}
    );
end function DAT_TO_{{name}};

function {{name}}_TO_DAT(reg: t_{{name}}) return t_busdata is
    variable ret: t_busdata := (others => '0');
begin
 {% for f in fields %}
  {% if f.subtype.upper().startswith("STD_LOGIC") %}
    ret({{f.srcrange}}) := reg.{{f.ident}};
  {% else %}
    ret({{f.srcrange}}) := STD_LOGIC_VECTOR(reg.{{f.ident}});
  {% endif %}
 {% endfor %}
    return ret;
end function {{name}}_TO_DAT;

procedure UPDATE_{{name}}(
    dat: in t_busdata; byteen: in std_logic_vector;
    variable reg: inout t_{{name}}) is
begin
 {% for b in byte %}
    if IS_HIGH(byteen({{b.index}})) then
     {% for f in b.fields %}
      {% if f.subtype.upper() == "STD_LOGIC" %}
        reg.{{f.ident}} := dat({{f.srcrange}});
      {% else %}
        reg.{{f.ident}}({{f.range}}) := {{f.subtype|upper}}( dat({{f.srcrange}}) );
      {% endif %}
     {% endfor %}
    end if;
 {% endfor %}
end procedure UPDATE_{{name}};

procedure UPDATESIG_{{name}}(
    dat: in t_busdata; byteen: in std_logic_vector;
    signal reg: inout t_{{name}}
) is
    variable r : t_{{name}};
begin
    r := reg;
    UPDATE_{{name}}(dat, byteen, r);
    reg <= r;
end procedure UPDATESIG_{{name}};

